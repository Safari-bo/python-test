#set cluster_name = $getVar('name', '')
#set ntp_server = $getVar('ntp_server', '')
#set partition = $getVar('partition', {})
#set default_gateway = $getVar('gateway', '')
#set dns = $getVar('nameservers', ['8.8.8.8'])[0]
#set network_cfg = $getVar('network_cfg', {})
#set server_credentials = $getVar('server_credentials', {})
#set console_credentials = $getVar('console_credentials', {})
#set component_settings = $getVar('component_settings', {})
#set ironic_settings = $getVar('ironic_settings', {})
#set octavia_settings = $getVar('octavia_settings', {})
#set package_host_mapping = $getVar('package_host_mapping', {})
#set ip_settings_detail = $getVar('ip_settings', {})

#set neutron_config = $getVar('neutron_config', {})

#set enable_ironic = $getVar('enable_ironic', '')
#set enable_ironicmon = $getVar('enable_ironicmon', '')
#set enable_manila = $getVar('enable_manila', '')
#set enable_magnum = $getVar('enable_magnum', '')

#set $sys_intf_mappings = {}
#for $intf_info in $network_cfg.sys_intf_mappings
#set $sys_intf_mappings[$intf_info['name']] = $intf_info['interface']
#end for

#set $bridge_mappings = {}
#for $mapping_info in $network_cfg.bridge_mappings
#set $bridge_mappings[$mapping_info['name']] = $mapping_info['interface']
#end for

#set $sys_device_mappings = {}
#for $intf_info in $network_cfg.sys_intf_mappings
#if $intf_info['interface'] in $bridge_mappings
#set $sys_device_mappings[$intf_info['name']] = $bridge_mappings[$intf_info['interface']]
#else
#set $sys_device_mappings[$intf_info['name']] = $intf_info['interface']
#end if
#end for

#set ironic_device_interface = 'eth0'
#for $intf_info in $network_cfg.sys_intf_mappings
#if $intf_info['name'] == 'ironic'
#set $ironic_device_interface = $intf_info['interface']
#end if
#end for

#set internal_vip = $network_cfg.internal_vip
#set public_vip = $network_cfg.public_vip
#set bond_mappings = $network_cfg.bond_mappings

#set neutron_ovs_config = $neutron_config.openvswitch

#set net_cidr = {}
#set ip_settings = $network_cfg.ip_settings
#for net in $ip_settings
#set net_cidr[$net['name']] = $net['cidr']
#end for

#set octavia_ip_settings = {}
#set ironic_ip_settings = {}
#set ip_settings = $network_cfg.ip_settings
#for net in $ip_settings
#if $net['name'] == 'octavia'
#set octavia_ip_settings = $net
#else if $net['name'] == 'ironic'
#set ironic_ip_settings = $net
#else if $net['name'] == 'magnum'
#set magnum_ip_settings = $net
#else if $net['name'] == 'ironic-monitor'
#set ironic_monitor_ip_settings = $net
#end if
#end for

#set tenant_network_type = $neutron_config.openvswitch.tenant_network_type
#set internal_vip = $network_cfg.internal_vip
#set internal_vip_interface = $internal_vip['interface']
#set public_vip = $network_cfg.public_vip
#set public_vip_interface = $public_vip['interface']

#set controller = $package_host_mapping['nova']
#set internal_ntp_server = $package_host_mapping['ntp_server']
#set computer = $package_host_mapping['computer']
#set ha = $package_host_mapping['haproxy']
#set datapool = $package_host_mapping['mariadb']
#set network = $package_host_mapping['neutron']
#set ceph_mon = $package_host_mapping['ceph_mon']
#set ceph_osd = $package_host_mapping['ceph_osd']
#set ceph_admin = $package_host_mapping['ceph_admin']
#set all = $package_host_mapping['all']
#set rsyslog = $package_host_mapping['rsyslog']
#set ironic = $package_host_mapping['ironic']
#set zabbix_server = $package_host_mapping['zabbix_server']

[DEFAULT]
;security info
server_user=$server_credentials['username']
server_password=$server_credentials['password']
ipmi_user=$component_settings.ipmi_user.value
ipmi_password=$component_settings.ipmi_password.value

;network info: brmgnt-->mgnt_nic, brex-->external_nic, brservice-->service_nic
mgnt_bridge=$sys_intf_mappings['mgnt']
external_bridge=$sys_intf_mappings['external']
service_bridge=$sys_intf_mappings['service']
ironic_nic=$ironic_device_interface
;choose a gateway device,it should be brmgnt,brex or brservice
gateway=$default_gateway
dns=$dns
mgnt_cidr=$net_cidr['mgnt']
external_cidr=$net_cidr['external']
service_cidr=$net_cidr['service']
ceph_public_cidr=$net_cidr['ceph-public']
ceph_cluster_cidr=$net_cidr['ceph-cluster']
management_vip=$internal_vip['ip']

;neutron info
octavia_provider=$octavia_settings.octavia_provider.value
octavia_mgnt_vlan=$octavia_settings.octavia_mgnt_vlan.value
octavia_cidr=$net_cidr['octavia']
octavia_mgnt_subnet_start=$octavia_ip_settings['ip_ranges'][0][0]
octavia_mgnt_subnet_end=$octavia_ip_settings['ip_ranges'][0][1]
service_vlan_range=$octavia_settings.service_vlan_ranges.value
external_vlan_range=$octavia_settings.external_vlan_ranges.value
anti_affinity_policy=$octavia_settings.anti_affinity_policy.value
enable_fwaas_log=$octavia_settings.fwaas_log.value
enable_security_group_log=$octavia_settings.security_group_log.value

;nodes info
ceph_admin_nodes=$ceph_admin
ceph_mon_nodes=$ceph_mon
ceph_osd_nodes=$ceph_osd
chrony_server_internal=$internal_ntp_server
chrony_server_external=$ntp_server
ha_nodes=$ha
datapool_nodes=$datapool
compute_nodes=$computer
controller_nodes=$controller
network_nodes=$network
rsyslog_nodes=$rsyslog
ironic_nodes=$ironic
zabbix_nodes=$zabbix_server
elasticsearch_nodes=$zabbix_server
optimize_nodes=ALL

magnum_enable=$enable_magnum
manila_enable=$enable_manila

;magnum info
magnum_vlan_tag=$magnum_ip_settings['vlan_tag']
magnum_cidr=$magnum_ip_settings['cidr']
magnum_subnet_start=$magnum_ip_settings['ip_ranges'][0][0]
magnum_subnet_end=$magnum_ip_settings['ip_ranges'][0][1]
magnum_gateway=$magnum_ip_settings['gw']

;the device provided for ironic, a isolate device or partition(>50G)
ironic_enable=$enable_ironic
ironic_device=$ironic_settings.ironic_device.value
ironic_cidr=$ironic_ip_settings['cidr']
ironic_subnet_start=$ironic_ip_settings['ip_ranges'][0][0]
ironic_subnet_end=$ironic_ip_settings['ip_ranges'][0][1]
ironic_vlan_tag=$ironic_ip_settings['vlan_tag']
ironic_monitor_enable=$enable_ironicmon
ironic_monitor_vlan=$ironic_monitor_ip_settings['vlan_tag']
ironic_monitor_start_ip=$ironic_monitor_ip_settings['ip_ranges'][0][0]
ironic_monitor_end_ip=$ironic_monitor_ip_settings['ip_ranges'][0][1]
ironic_monitor_cidr=$ironic_monitor_ip_settings['cidr']
ironic_monitor_gateway=$ironic_monitor_ip_settings['gw']
ironic_monitor_destination=$net_cidr['mgnt']

;neutron configurations
neutron_sw_base_mac_address=$ironic_settings.neutron_sw_base_mac_address.value
neutron_sw_device_type=$ironic_settings.neutron_sw_device_type.value
neutron_sw_username=$ironic_settings.neutron_sw_username.value
neutron_sw_password=$ironic_settings.neutron_sw_password.value
neutron_sw_mgnt_ip=$ironic_settings.neutron_sw_mgnt_ip.value
neutron_sw_device_secret=$ironic_settings.neutron_sw_device_secret.value
neutron_sw_device_port=$ironic_settings.neutron_sw_device_port.value
neutron_router_mode=$octavia_settings.router_mode.value
service_vxlan_ranges=$octavia_settings.service_vxlan_ranges.value
dvr_flow_driver=$octavia_settings.enable_dvr_flow_driver.value

;router id
haproxy_mgnt_router_id=$component_settings.router_id_ranges.value[0]
rabbitmq_mgnt_router_id=$component_settings.router_id_ranges.value[1]
ironic_router_id=$component_settings.router_id_ranges.value[2]
drs_mgnt_router_id=$component_settings.router_id_ranges.value[3]
vmha_mgnt_router_id=$component_settings.router_id_ranges.value[4]
zabbix_mgnt_vip =$component_settings.zabbix_vip.value
zabbix_vip_db =$component_settings.zabbix_db_vip.value
zabbix_mgnt_router_id =$component_settings.router_id_ranges.value[5]
mariadbbackup_rbd_size =$component_settings.mariadbbackup_rbd_size.value
cluster_ha=$component_settings.cluster_ha.value

;disk info
ceph_osd_hdd_disk_num=$component_settings.osd_hdd_disk_num.value
ceph_osd_ssd_disk_num=$component_settings.osd_ssd_disk_num.value
cinder_use_ceph=$component_settings.cinder_use_ceph.value
flashcache_enable=$component_settings.enable_flashcache.value

[default]
install_mode=normal
br_management=%(mgnt_bridge)s
br_external=%(external_bridge)s
br_tunnel=%(service_bridge)s
mgnt=mgnt
service=service
ex=external
ironic=ironic
octavia=octavia
management=mgnt
external=external
tunnel=service
ha_switch=%(cluster_ha)s

[all]
nodes=%(optimize_nodes)s

[ceph]
install=true
admin=%(ceph_admin_nodes)s
ceph_user=%(server_user)s
ceph_password=%(server_password)s
ceph_sudo_pass=%(server_password)s
mon_hosts=%(ceph_mon_nodes)s
osd_hosts=%(ceph_osd_nodes)s
flashcache=%(flashcache_enable)s
public_network=%(ceph_public_cidr)s
cluster_network=%(ceph_cluster_cidr)s
osd_hdd_disk_num=%(ceph_osd_hdd_disk_num)s
osd_ssd_disk_num=%(ceph_osd_ssd_disk_num)s
ceph_pool_rbd=%(cinder_use_ceph)s

[chrony]
nodes=ALL
server=%(chrony_server_internal)s
servers_online=%(chrony_server_external)s
network=%(mgnt_cidr)s

[rsyslog]
nodes=%(rsyslog_nodes)s
master=127.0.0.1
slave=127.0.0.1

[haproxy]
nodes=%(ha_nodes)s
mgnt_router_id=%(haproxy_mgnt_router_id)s
mgnt_vip=%(management_vip)s
mgnt_interface=mgnt
is_only_for_zabbixdb=false
;Do not use external vip by default
use_external=false
external_router_id=%(haproxy_mgnt_router_id)s
external_vip=%(management_vip)s
external_interface=external

[mariadb]
nodes=%(datapool_nodes)s
rbd_size=%(mariadbbackup_rbd_size)s

[garbd]
nodes=%(ceph_admin_nodes)s

[memcached]
nodes=mariadb

[rabbitmq]
nodes=mariadb
mgnt_router_id=%(rabbitmq_mgnt_router_id)s

[computer]
nodes=%(compute_nodes)s

[nova]
nodes=%(controller_nodes)s
vncproxy_host=%(management_vip)s

[keystone]
nodes=nova

[glance]
nodes=nova

[cinder]
nodes=nova

[ceilometer]
install=true
nodes=nova

[manila]
install=%(manila_enable)s
nodes=nova

[magnum]
install=%(magnum_enable)s
nodes=nova
vlan=%(magnum_vlan_tag)s
subnet_start=%(magnum_subnet_start)s
subnet_end=%(magnum_subnet_end)s
cidr=%(magnum_cidr)s
gateway=%(magnum_gateway)s
network=%(mgnt_cidr)s

[etcd]
install=%(magnum_enable)s
service_network=%(service_cidr)s

[gnocchi]
nodes=nova

[heat]
install=true
nodes=nova

[ironic]
install=%(ironic_enable)s
nodes=%(ironic_nodes)s
ironic_compute_router_id=%(ironic_router_id)s
mount=%(ironic_device)s
ironic_vlan=%(ironic_vlan_tag)s
subnet_start=%(ironic_subnet_start)s
subnet_end=%(ironic_subnet_end)s
cidr=%(ironic_cidr)s

[ironic_monitor]
enable=%(ironic_monitor_enable)s
vlan=%(ironic_monitor_vlan)s
subnet_start=%(ironic_monitor_start_ip)s
subnet_end=%(ironic_monitor_end_ip)s
cidr=%(ironic_monitor_cidr)s
gateway=%(ironic_monitor_gateway)s
destination=%(ironic_monitor_destination)s

[ironic_compute]
nodes=nova

[neutron_server]
nodes=nova

[genericswitch]
#configure the switch base mac address
sw_base_mac_address=%(neutron_sw_base_mac_address)s
#switch device_type:blank,netmiko_huawei,netmiko_cisco_ios,netmiko_arista_eos,netmiko_dell_force10
device_type=%(neutron_sw_device_type)s
#switch user and password
username=%(neutron_sw_username)s
password=%(neutron_sw_password)s
#switch mgnt ip
ip=%(neutron_sw_mgnt_ip)s
secret=%(neutron_sw_device_secret)s
port=%(neutron_sw_device_port)s

[octavia]
install=true
#octavia provider:ServiceVM,Agent
provider=%(octavia_provider)s
mgnt_vlan=%(octavia_mgnt_vlan)s
#octavia management network start end cidr and gateway
mgnt_subnet_start=%(octavia_mgnt_subnet_start)s
mgnt_subnet_end=%(octavia_mgnt_subnet_end)s
mgnt_cidr=%(octavia_cidr)s
anti_affinity=%(anti_affinity_policy)s
#octavia image_name: amphora-x64-haproxy-centos.qcow2,amphora-x64-haproxy-centos.raw,
#                    amphora-x64-haproxy-ubuntu.qcow2,amphora-x64-haproxy-ubuntu.raw
image_name=amphora-x64-haproxy-centos.raw
#octavia api ip and port
host=%(controller_nodes)s
port=5555

[neutron]
nodes=%(network_nodes)s
enable_dvr_flow_driver=%(dvr_flow_driver)s
;vxlan: external:br-ex
;vlan:  external:br-ex,provider:br-provider
router_mode=%(neutron_router_mode)s
service_vni_ranges=%(service_vxlan_ranges)s
;Only work in vlan mode
ext_vlan_ranges=external:%(external_vlan_range)s
service_vlan_ranges=service:%(service_vlan_range)s
fwaas_log=%(enable_fwaas_log)s
security_group_log=%(enable_security_group_log)s

[portal]
install=true
nodes=nova

[zabbix_server]
zabbix_vip=%(zabbix_mgnt_vip)s
zabbix_db_vip=%(zabbix_vip_db)s
nodes=%(zabbix_nodes)s
mgnt_router_id=%(zabbix_mgnt_router_id)s

[zabbix_agent]
nodes=all

[elasticsearch]
nodes=%(elasticsearch_nodes)s
master=%(elasticsearch_nodes)s
data=%(elasticsearch_nodes)s

[logstash]
nodes=all

[kibana]
nodes=%(zabbix_nodes)s

[hastack]
install=true
ipmi_account=%(ipmi_user)s
ipmi_passwd=%(ipmi_password)s
keepalived_interface=mgnt
drs_router_id=%(drs_mgnt_router_id)s
vmha_router_id=%(vmha_mgnt_router_id)s

[watchdog]
install=true

[gitbackup]
install=true

[mariadbbackup]
install=true

[rsync]
install=true
